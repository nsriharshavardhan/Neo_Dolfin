# -*- coding: utf-8 -*-
"""Residuals_age-normed.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1R-BwilOFlwyNqlMR8IM92jU-uzm8cemy
"""

import pandas as pd
import numpy as np
from datetime import datetime, timedelta

np.random.seed(22)
#sge knots
AGE_KNOTS_A = [33.5, 49, 64.5]

#spline function to generate median savings balance based on age
def temp_spline_function_f(x):
    return 0.7 + 0.5*x - 0.01*x**2 + \
           np.random.normal(0, 0.01, len(x))*(np.maximum(0, x-33.5))**2 + \
           np.random.normal(0, 0.002, len(x))*(np.maximum(0, x-49))**2 - \
           np.random.normal(0, 0.005, len(x))*(np.maximum(0, x-64.5))**2

#calculate score based on standard deviation
def calculate_score(residual_value, median_daily_savings):
    #calculate the standard deviation
    std_deviation = residual_value / median_daily_savings

    #define the score ranges
    score_ranges = [-np.inf, -2.5, -1, 1, 2.5, np.inf]

    #map the standard deviation to the score ranges
    for i in range(len(score_ranges) - 1):
        if score_ranges[i] <= std_deviation < score_ranges[i + 1]:
            return i

    #handle cases outside the defined ranges
    if std_deviation < score_ranges[0]:
        return 0
    else:
        return len(score_ranges) - 2

#generate age-normed residuals
def generate_age_normed_residuals(start_date, end_date, num_rows):
    #generate date range
    date_range = pd.date_range(start=start_date, end=end_date, freq='D')

    #generate random ages for each customer
    customers = np.arange(1, 1001)
    customer_ages = np.random.randint(18, 81, len(customers))

    #create DataFrame for transactions
    transactions = pd.DataFrame({
        'customer_id': np.repeat(customers, len(date_range)),
        'transaction_date': np.tile(date_range, len(customers)),
        'customer_age': np.repeat(customer_ages, len(date_range))
    })

    #calculate median savings balance based on age for each customer
    transactions['median_saving_balance'] = np.exp(temp_spline_function_f(transactions['customer_age']) + np.random.normal(scale=2, size=len(transactions)))

    #generate random transaction values within the range of -10000 to 10000
    transactions['transactions'] = np.random.uniform(-10000, 10000, len(transactions))

    #calculate age-normed residuals
    age_bins = pd.cut(transactions['customer_age'], bins=[-np.inf] + AGE_KNOTS_A + [np.inf])
    transactions['age_normed_residuals'] = transactions.groupby(['customer_id', age_bins])['median_saving_balance'].transform(lambda x: np.median(x) - x)

    #calculate standard deviation and score
    transactions['std_deviation'] = transactions['age_normed_residuals'] / transactions['median_saving_balance']
    transactions['score'] = transactions.apply(lambda row: calculate_score(row['age_normed_residuals'], row['median_saving_balance']), axis=1)

    #calculate individual savings
    transactions['individual_savings'] = transactions['median_saving_balance'] + transactions['age_normed_residuals']

    transactions = transactions[['customer_id', 'customer_age', 'transaction_date', 'transactions',
                                 'median_saving_balance', 'age_normed_residuals', 'std_deviation',
                                 'individual_savings', 'score']]

    return transactions.sample(n=num_rows)

#define start and end dates for the last year
end_date = datetime.now().date()
start_date = end_date - timedelta(days=365)

#generate age-normed residuals for the last year with 10000 rows
age_normed_residuals_df = generate_age_normed_residuals(start_date, end_date, num_rows=10000)

#print the DataFrame
print(age_normed_residuals_df)

#saving df as csv
age_normed_residuals_df.to_csv("Age-norm residuals with scores.csv", index=False)

