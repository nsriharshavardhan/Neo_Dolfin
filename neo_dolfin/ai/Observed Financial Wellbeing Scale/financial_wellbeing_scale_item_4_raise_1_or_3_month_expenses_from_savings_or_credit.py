# -*- coding: utf-8 -*-
"""Financial Wellbeing Scale - Item 4: Raise 1 or 3 month expenses from savings or credit

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_jSp-wG2biGfc05xhiEJAEiI-V_-_NiN
"""

import pandas as pd

def raise_expenses(csv_file_path):
    # Load CSV into DataFrame
    data = pd.read_csv(csv_file_path)

    # Convert relevant columns to numeric and datetime
    data['Amount'] = pd.to_numeric(data['Amount'], errors='coerce')
    data['Balance'] = pd.to_numeric(data['Balance'], errors='coerce')
    data['Date'] = pd.to_datetime(data['Date'])

    # Rename columns if necessary
    if 'Description' not in data.columns:
        data.rename(columns={'Transaction Details': 'Description'}, inplace=True)

    # Filter relevant data - filtering out Transfers, and for negative transactions (expenses)
    filtered_data = data[data['Amount'] < 0].loc[~data['Description'].str.contains('Transfer')]
    filtered_data.set_index('Date', inplace=True)

    # Calculate monthly expenses, and 3 months worth of expenses
    monthly_expenses_credit_card = filtered_data[['Amount']].resample('M').sum()
    average_amount = monthly_expenses_credit_card['Amount'].mean()
    three_months_average = average_amount * 3

    # Create DataFrame with full date range
    full_date_range = pd.date_range(start=data['Date'].min(), end=data['Date'].max())
    full_date_df = pd.DataFrame({'Date': full_date_range})

    # Merge full date DataFrame with filtered data
    merged_df = pd.merge(full_date_df, filtered_data, on='Date', how='outer').drop_duplicates(subset='Date', keep='last')
    merged_df.sort_values(by='Date', inplace=True)
    merged_df['Balance'].fillna(method='ffill', inplace=True)

    # Slice DataFrame for last 12 months
    merged_df_last_12_months = merged_df.iloc[-365:]

    # Calculate how many days balance was over 30 days expenses
    dates_above_average = (merged_df_last_12_months['Balance'] >= average_amount).sum()
    # Calculate how many days balance was over 90 days expenses
    dates_above_three_months_average = (merged_df_last_12_months['Balance'] >= three_months_average).sum()
    # Calculate total number of days available in data from the last 12 months
    total_days = len(merged_df_last_12_months)
    # Calculate percentage of days where Balance was above 30 day average
    percentage_above_monthly_expenses = (dates_above_average / total_days) * 100
    # Calculate percentage of days where Balance was above 90 day average
    percentage_above_3_monthly_expenses = (dates_above_three_months_average / total_days) * 100

    # Assign score based on percentages
    if percentage_above_3_monthly_expenses == 100:
        score = 4
    elif percentage_above_monthly_expenses <= 5:
        score = 0
    elif 5 < percentage_above_monthly_expenses <= 25:
        score = 1
    elif 25 < percentage_above_monthly_expenses <= 90:
        score = 2
    else:
        score = 3

    return {

        "score": score
    }

# Call dataset into function:
result = raise_expenses('/content/savings_account.csv')
print("Result:", result)